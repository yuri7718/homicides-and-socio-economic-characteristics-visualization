{"version":3,"sources":["assets/NAT_counties.csv","assets/NAT_states.csv","assets/NAT.geojson","assets/US_states.geojson","feature/Feature.js","time/Time.js","map/helper.js","map/Choropleth.js","parallel-coordinates/ParallelCoordinates.js","parallel-coordinates/helper.js","scatter-plot/ScatterPlot.js","scatter-plot/helper.js","map/Heatmap.js","map/helper-heatmap.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Feature","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","features","featureList","react_default","a","createElement","id","style","height","overflow","padding","border","index_es","dataLength","length","scrollableTarget","list","dataSource","renderItem","item","Item","key","accessKey","onClick","onSelectFeature","background","currentFeature","Meta","title","feature","React","Component","Time","marks","timeline","reduce","marksDict","year","slider","step","defaultValue","min","max","onChange","onSelectTime","trackStyle","backgroundColor","getColorScale","featureExtrema","nColors","d3","domain","range","getExtrema","years","dataGeojson","propertyArray","map","forEach","property","d","properties","concat","hideMap","mapID","hideStateLegend","stateLegend","Choropleth","toggleMapType","value","setState","increaseZoomScale","zoomTransition","decreaseZoomScale","resetSelectedRegion","region","onSelectRegion","state","currentYear","showState","x","y","zoomScale","stateGeojson","countyGeojson","canvasRef","createRef","ZOOM_SCALE_THRESHOLD","STATE_MAP_ID","COUNTY_MAP_ID","STATE_COLORS","COUNTY_COLORS","zoom","tooltip","append","attr","svg","zoomLevel","transition","delay","duration","scaleBy","_this2","_this$canvasRef$curre","current","scrollWidth","scrollHeight","projection","scale","translate","path","countyExtrema","stateColorScale","countyColorScale","remove","select","drawStates","drawCounties","drawStateLegend","drawCountyLegend","scaleExtent","on","event","transform","selectAll","k","updateZoomedView","colorScale","legend","d3legend","legendColor","shapeWidth","orient","_this3","data","enter","STATE_NAME","html","getTooltipText","pageX","pageY","_this4","NAME","_this5","roundedValue","toFixed","_this6","element","Promise","all","then","drawMap","catch","err","console","log","prevProps","prevState","text","row","gutter","col","span","segmented","options","es_button","width","ref","ParallelCoordinates","margin","currentState","filter","rootGroup","yScales","bottom","top","scales","Number","getYScales","xScale","join","yScale","each","ticks","stateCSV","countyCSV","clearChart","drawParallelCoordinates","textAlign","ScatterPlot","left","right","xProperty","yProperty","drawScatterPlot","Heatmap","yearRange","margins","cleanedData","avg","sum","getAverage","push","yAxis","dataPerFeature","hasOwnProperty","colorScales","bandwidth","clearMap","drawHeatMap","App","selectTime","countyDataset","stateDataset","county","selectFeature","bind","assertThisInitialized","selectRegion","e","preventDefault","currentTarget","natCounties","natStates","fetchData","className","layout","card","src_feature_Feature","src_time_Time","map_Choropleth","statesGeojson","natGeojson","map_Heatmap","parallel_coordinates_ParallelCoordinates","scatter_plot_ScatterPlot","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_App_0"],"mappings":"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","file":"static/js/main.b5062e1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NAT_counties.c46752c1.csv\";","module.exports = __webpack_public_path__ + \"static/media/NAT_states.e22e9ae7.csv\";","module.exports = __webpack_public_path__ + \"static/media/NAT.6db895be.geojson\";","module.exports = __webpack_public_path__ + \"static/media/US_states.2aa3311d.geojson\";","import { Avatar, Divider, List, Skeleton } from 'antd';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport React from 'react';\nimport './Feature.css';\nimport { reduce, schemeBlues, tickStep } from 'd3';\nimport { isContentEditable } from '@testing-library/user-event/dist/utils';\n\n\nclass Feature extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n  render() {\n    const features = this.props.featureList;\n\n    return (\n      <div>\n        <h3>Features</h3>\n        <div\n          id=\"scrollableDiv\"\n          style={{\n            height: 400,\n            overflow: 'auto',\n            padding: '0 16px',\n            border: '1px solid rgba(140, 140, 140, 0.35)',\n          }}\n        >\n        <InfiniteScroll\n          dataLength={features.length}\n          scrollableTarget=\"scrollableDiv\"\n        >\n          <List\n            dataSource={features}\n            renderItem={(item) => (\n              <List.Item\n                key={item.key}\n                accessKey={item.key}\n                onClick={this.props.onSelectFeature}\n                style={{background: this.props.currentFeature===item.key ? '#7b88b8' : 'white'}}\n              >\n                <List.Item.Meta title={item.feature} />\n                <div>[Statistical Measures]</div>\n              </List.Item>\n            )}\n          />\n        </InfiniteScroll>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default Feature;","import { Slider } from 'antd';\nimport React from 'react';\nimport './Time.css'\n\nclass Time extends React.Component {\n  constructor(props) {\n    super(props)\n    this.marks = this.props.timeline.reduce((marksDict, year) => {\n      marksDict[year] = '19' + year;\n      return marksDict;\n  }, {});\n  }\n  \n  render() {\n    return (\n      <div id=\"timeline\">\n        <Slider marks={this.marks} step={null}\n          defaultValue={60} min={60} max={90}\n          onChange={this.props.onSelectTime}\n          trackStyle={{backgroundColor: '#f5f5f5'}}\n        />\n      </div>\n    )\n  }\n};\n\nexport default Time;","import * as d3 from 'd3';\n\n/**\n * Return the color scale for the selected feature\n * \n * @param {number[]} featureExtrema The extrema for the selected feature over the 4 decades\n * @param {number} nColors The number of colors for the color scale\n * @returns {function} The color scale\n */\nexport function getColorScale(featureExtrema, nColors) {\n  \n  return d3.scaleQuantile()\n    .domain(d3.extent(featureExtrema))\n    .range(d3.schemeGnBu[nColors]);\n}\n\n/**\n * Return a list of extrema for the selected feature over the 4 decades\n * \n * @param {string} feature The selected feature\n * @param {number[]} years The array of years [60, 70, 80, 90]\n * @param {Object[]} dataGeojson The geojson data for all counties\n * @returns {number[]} The extrema for the selected feature\n */\nexport function getExtrema(feature, years, dataGeojson) {\n\n  // propertyArray is ['HR60', 'HR70', 'HR80, 'HR90'] for input feature HR (homicide rate)\n  const propertyArray = years.map(year => feature + year);\n\n  // iterate through the propertyArray to find the extrema\n  let featureExtrema = [];\n  propertyArray.forEach(property => {\n    const features = dataGeojson.map(d => d.properties[property]);\n    featureExtrema = d3.extent(featureExtrema.concat(features));\n  });\n\n  return featureExtrema;\n}\n\n\nexport function showMap(mapID) {\n  d3.selectAll(mapID)\n    .style('visibility', 'visible');\n}\n\nexport function hideMap(mapID) {\n  d3.selectAll(mapID)\n    .style('visibility', 'hidden');\n}\n\nexport function hideStateLegend(stateLegend) {\n  stateLegend.style('visibility', 'hidden');\n}\n\nexport function showStateLegend(stateLegend) {\n  stateLegend.style('visibility', 'visible');\n}\n\nexport function getTooltipText(region, feature, value, year) {\n  const roundedValue = value.toFixed(2);\n  const html =\n  `<div>\n    <p><b>${region}<b></p>\n    <p><b>${feature}: </b>${roundedValue}<p>\n    <p><b>Year: </b>19${year}</p>\n  </div>`\n  return html;\n}","import React from 'react';\nimport * as d3 from 'd3';\nimport { getColorScale, getExtrema, showMap, hideMap, getTooltipText, showStateLegend, hideStateLegend } from './helper';\nimport { Segmented, Row, Col, Button } from 'antd';\nimport d3legend from 'd3-svg-legend';\nimport {createTooltip} from '../tooltip';\nclass Choropleth extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      property: this.props.currentFeature + this.props.currentYear,\n      showState: true,\n      x: 0,\n      y: 0,\n      zoomScale: 1,\n      map: 'CHOROPLETH',\n      region: ''\n    }\n\n    // geojson data\n    this.stateGeojson = [];\n    this.countyGeojson = [];\n\n    this.canvasRef = React.createRef();\n    this.ZOOM_SCALE_THRESHOLD = 2;\n\n    // map id\n    this.STATE_MAP_ID = 'g-state';\n    this.COUNTY_MAP_ID = 'g-county';\n\n    // number of colors for the color scale\n    this.STATE_COLORS = 7;\n    this.COUNTY_COLORS = 7;\n\n    this.zoom = Object;\n\n    this.featureList = {};\n\n\n    this.tooltip = d3.select('body')\n    .append('div')\n    .attr('class', 'tooltip')\n    .style('visibility', 'hidden')\n    .style('left', '0px')\n    .style('top', '0px');\n\n  }\n\n  toggleMapType = (value) => {\n    //event.preventDefault();\n    //console.log(value)\n    this.setState({map: value});\n  }\n\n  increaseZoomScale = () => {\n    this.zoomTransition(d3.select('#map'), 1.2);  \n  }\n\n  decreaseZoomScale = () => {\n    this.zoomTransition(d3.select('#map'), 0.8);\n  }\n\n  resetSelectedRegion = () => {\n    this.setState({region: ''}, () => {this.props.onSelectRegion('', '');})\n  }\n\n  zoomTransition(svg, zoomLevel) {\n    svg.transition()\n      .delay(100)\n      .duration(700)\n      .call(this.zoom.scaleBy, zoomLevel);\n  }\n\n\n\n  drawMap() {\n    const {scrollWidth, scrollHeight} = this.canvasRef.current;\n\n    const projection = d3.geoAlbersUsa()\n      .scale(scrollWidth / 1.2)\n      .translate([scrollWidth / 2, scrollHeight / 2]);\n    \n    const path = d3.geoPath()\n      .projection(projection);\n\n    const countyExtrema = getExtrema(this.props.currentFeature, this.props.years, this.countyGeojson);\n    const stateExtrema = getExtrema(this.props.currentFeature, this.props.years, this.stateGeojson);\n    \n    const stateColorScale = getColorScale(stateExtrema, this.STATE_COLORS);\n    const countyColorScale = getColorScale(countyExtrema, this.COUNTY_COLORS);\n\n    d3.selectAll('#' + this.STATE_MAP_ID).remove();\n    d3.selectAll('#' + this.COUNTY_MAP_ID).remove();\n\n    const svg = d3.select(this.canvasRef.current).select('#map');\n\n    this.drawStates(svg, stateColorScale, path);\n    this.drawCounties(svg, countyColorScale, path);\n    this.drawStateLegend(stateColorScale);\n    this.drawCountyLegend(countyColorScale);\n    \n    if (this.state.showState) {\n      // hide county\n      hideMap('#' + this.COUNTY_MAP_ID);\n    \n    } else {\n      // hide state\n      hideStateLegend(d3.select('#legend').select('#' + this.STATE_MAP_ID))\n    }\n\n    // zoom function\n    const zoomed = event => {\n      const {transform} = event;\n      d3.select('#map').selectAll('g').attr('transform', transform);\n      d3.select('#map').selectAll('g').attr('stroke-width', 1 / transform.k);\n      this.setState({x: transform.x, y: transform.y, zoomScale: transform.k}, this.updateZoomedView(this.state.zoomScale));\n    };\n\n    this.zoom = d3.zoom()\n      .scaleExtent([1, 4])\n      .on(\"zoom\", zoomed);\n    \n    svg.call(this.zoom)\n      .transition()\n      .call(this.zoom.transform, d3.zoomIdentity.translate(this.state.x,this.state.y).scale(this.state.zoomScale));\n\n  }\n\n  drawStateLegend(colorScale) {\n    const legend = d3legend.legendColor()\n      .shapeWidth(30)\n      .orient('vertical')\n      .scale(colorScale);\n    d3.select('#legend').append('g').attr('id', this.STATE_MAP_ID).call(legend);\n  }\n\n  drawCountyLegend(colorScale) {\n    const legend = d3legend.legendColor()\n      .shapeWidth(30)\n      .orient('vertical')\n      .scale(colorScale);\n    d3.select('#legend').append('g').attr('id', this.COUNTY_MAP_ID).call(legend);\n  }\n\n  drawStates(svg, colorScale, path) {\n    \n\n    svg.append('g')\n      .attr('id', this.STATE_MAP_ID)\n      .selectAll('path')\n      .data(this.stateGeojson)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', d => colorScale(d.properties[this.state.property]))\n      .style('stroke', '#000')\n      .on('click', (event, d) => {\n        this.props.onSelectRegion(d.properties.STATE_NAME, '');\n        this.setState({region: d.properties.STATE_NAME});\n      })\n      .on('mouseover', (event, d) => {\n        this.tooltip\n          .style('visibility', 'visible');\n        this.tooltip.html(this.getTooltipText(d.properties.STATE_NAME,\n            this.props.currentFeature, d.properties[this.state.property],\n            this.props.currentYear))\n          .style('left', (event.pageX + 10) + 'px')\n          .style('top', (event.pageY + 10) + 'px');\n      })\n      .on('mouseout', (event, d) => {\n        this.tooltip.style('visibility', 'hidden')\n      });\n  }\n\n  drawCounties(svg, colorScale, path) {\n    svg.append('g')\n      .attr('id', this.COUNTY_MAP_ID)\n      .selectAll('path')\n      .data(this.countyGeojson)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', d => colorScale(d.properties[this.state.property]))\n      .style('stroke', '#000')\n      .on('click', (event, d) => {\n        this.props.onSelectRegion(d.properties.STATE_NAME, d.properties.NAME);\n        this.setState({region: d.properties.NAME + ', ' + d.properties.STATE_NAME});\n      })\n      .on('mouseover', (event, d) => {\n        this.tooltip\n          .style('visibility', 'visible');\n        this.tooltip.html(this.getTooltipText(d.properties.NAME + ', ' + d.properties.STATE_NAME,\n            this.props.currentFeature,\n            d.properties[this.state.property],\n            this.props.currentYear))\n          .style('left', (event.pageX + 10) + 'px')\n          .style('top', (event.pageY + 10) + 'px');\n      })\n      .on('mouseout', (event, d) => {\n        this.tooltip.style('visibility', 'hidden')\n      });\n\n   \n  }\n\n  /**\n   * Toogle the visibility of #map-county based on zoom scale\n   * \n   * @param {number} zoomScale The scale factor\n   */\n  updateZoomedView(zoomScale) {\n    if (zoomScale > this.ZOOM_SCALE_THRESHOLD && this.state.showState === true) {\n      // change to county view\n      this.setState({showState: false}, () => {\n        showMap('#' + this.COUNTY_MAP_ID);\n        hideStateLegend(d3.select('#legend').select('#' + this.STATE_MAP_ID));\n\n      });\n    } else if (zoomScale <= this.ZOOM_SCALE_THRESHOLD && this.state.showState === false) {\n      // change to state view\n      this.setState({showState: true}, () => {\n        hideMap('#' + this.COUNTY_MAP_ID);\n        showStateLegend(d3.select('#legend').select('#' + this.STATE_MAP_ID))\n      });\n    }\n  }\n\n  getTooltipText(region, feature, value, year) {\n    const roundedValue = value.toFixed(2);\n    const html =\n    `<div>\n      <p><b>${region}<b></p>\n      <p><b>${this.featureList[feature]}: </b>${roundedValue}<p>\n      <p><b>Year: </b>19${year}</p>\n    </div>`\n    return html;\n  }\n\n  componentDidMount() {\n    this.props.featureList.forEach(element => {\n      this.featureList[element.key] = element.feature;\n    });\n\n    Promise.all([d3.json(this.props.stateGeojson), d3.json(this.props.countyGeojson)]).then(data => {\n      this.stateGeojson = data[0].features;\n      this.countyGeojson = data[1].features;\n      this.drawMap();\n    }).catch(err => console.log(\"error\", err));\n  \n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const property = this.props.currentFeature + this.props.currentYear;\n    if (prevState.property !== property) {\n      this.setState({property: property});\n      //d3.select('svg#legend').selectAll('*').remove();\n      this.drawMap();\n    }\n  }\n\n  render() {\n    const text = (this.state.region==='') ? 'None' : this.state.region;\n    return (\n      <div style={{height: '100%'}}>\n        <Row gutter={[20, 16]} style={{height: '100%'}}>\n          <Col span={5}>\n            <Segmented options={['CHOROPLETH', 'HEXBIN']} value={this.state.map} onChange={this.toggleMapType} />\n            <div>\n              <svg id='legend'><g></g></svg>\n            </div>\n            <div>\n              <Button onClick={this.increaseZoomScale}>+</Button>\n              <Button onClick={this.decreaseZoomScale}>-</Button>\n            </div>\n            <div>\n              Selected region: {text}\n            </div>\n            <Button onClick={this.resetSelectedRegion}>Reset selected region</Button>\n          </Col>\n          <Col span={19}>\n            <div style={{height: '100%', width: '100%'}} ref={this.canvasRef}>\n              <svg id='map' style={{width: '100%', height: '95%'}}><g id='root'></g></svg>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Choropleth;","import React from 'react';\nimport * as d3 from 'd3';\nimport { Spin } from 'antd';\nimport { getStateData, getYScales } from './helper';\n\nclass ParallelCoordinates extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n\n    this.title = '';\n  }\n\n\n\n  drawParallelCoordinates(data) {\n\n    const {scrollWidth, scrollHeight} = this.canvasRef.current;\n\n    const margin = {top: 50, right: 50, bottom: 50, left: 50};\n    const width = scrollWidth - margin.left - margin.right;\n    const height = scrollHeight - margin.top - margin.bottom;\n\n    if (this.props.currentState !== '') {\n      data = data.filter(d => d.STATE_NAME === this.props.currentState);\n    }\n\n    const svg = d3.select(this.canvasRef.current).select('svg')\n      .attr('width', width)\n      .attr('height', height)\n\n    const rootGroup = svg.select('g#root');\n\n    rootGroup.append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n    let features = this.props.featureList.map(feature => feature.key + this.props.currentYear);\n\n    const yScales = getYScales(data, features, margin.top + height, margin.top);\n    const xScale = d3.scalePoint()\n      .range([margin.left, width])\n      .domain(features);\n\n    const path = d => {\n      return d3.line()(features.map(feature => {\n        const yScale = yScales[feature];\n        return [xScale(feature), yScale(Number(d[feature]))];\n      }));\n    }\n\n    rootGroup.selectAll('path')\n      .data(data)\n      .join('path')\n      .attr('d', path)\n      .style('fill', 'none')\n      .style('stroke', '#69b3a2')\n    \n    rootGroup.selectAll(\"myAxis\")\n      .data(features).enter()\n      .append(\"g\")\n      .attr('id', 'axis-test')\n      .attr('transform', d => `translate(${xScale(d)})`)\n      .each(function(d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(yScales[d])); })\n      .append(\"text\")\n      .style(\"text-anchor\", \"middle\")\n      .attr(\"y\", 10)\n      .text(function(d) { \n        return d; })\n      .style(\"fill\", \"black\")\n      .attr('id', 'label-test')\n      \n  \n  }\n\n  componentDidMount() {\n\n  }\n\n  componentDidUpdate(prevProps, prevState) { \n    if (prevProps.currentState !== this.props.currentState) {\n      //console.log(this.props.currentState)\n    }\n  }\n\n  clearChart() {\n    d3.select(this.canvasRef.current).select('g#root').selectAll('*').remove();\n  }\n\n\n  render() {\n  \n    if (this.props.stateCSV.length > 0 && this.props.countyCSV.length > 0) {\n      if (this.props.currentState === '') {\n        this.clearChart();\n        this.drawParallelCoordinates(this.props.stateCSV);\n      } else {\n        this.clearChart();\n        this.drawParallelCoordinates(this.props.countyCSV);\n      }\n    }\n    const text = this.props.currentState === '' ?\n      ('US states socio-economic characteristics in 19' +  this.props.currentYear) :\n      this.props.currentState + ' socio-economic characteristics in 19' + this.props.currentYear;\n    return (\n      <div style={{height: '100%'}}>\n        <div style={{padding: '10px 10px', textAlign: 'center'}}>{text}</div>\n        <div style={{height: '100%'}} ref={this.canvasRef}>\n          <svg style={{width: '100%', height: '100%'}}>\n            <g id='root'></g>\n          </svg>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default ParallelCoordinates;","import * as d3 from 'd3';\n\n/**\n * \n * @param {*} data \n * @param {*} features \n * @param {*} bottom \n * @param {*} top \n * @returns \n */\nexport function getYScales(data, features, bottom, top) {\n  \n  const scales = {};\n\n  features.forEach(feature => {\n    scales[feature] = d3.scaleLinear()\n      .domain(d3.extent(data, item => Number(item[feature])))\n      .range([bottom, top]);\n  });\n \n\n\n  return scales;\n}\n\nexport function getStateData(data, year) {\n  \n}","import React from 'react';\nimport * as d3 from 'd3';\nimport { Row, Col } from 'antd';\nimport { xScale, yScale } from './helper';\n\nclass ScatterPlot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n    this.featureList = {};\n  }\n\n  drawScatterPlot(data) {\n    const {scrollWidth, scrollHeight} = this.canvasRef.current;\n\n    const margin = {top: 30, right: 30, bottom: 30, left: 70};\n    const width = scrollWidth - margin.left - margin.right;\n    const height = scrollHeight - margin.top - margin.bottom;\n\n    const svg = d3.select(this.canvasRef.current).select('svg')\n      .attr('width', scrollWidth)\n      .attr('height', scrollHeight);\n    const rootGroup = svg.select('g#root')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    if (this.props.currentState !== '') {\n      data = data.filter(d => d.STATE_NAME === this.props.currentState);\n    }\n\n    const x = xScale(data, this.props.currentYear, 0, width);\n    const y = yScale(data, this.props.currentFeature, this.props.currentYear, height, 0);\n\n    rootGroup.append('g')\n      .attr('transform', `translate(0, ${height} )`)\n      .call(d3.axisBottom(x))\n\n    rootGroup.append('g')\n      .call(d3.axisLeft(y));\n\n    const xProperty = 'HR' + this.props.currentYear;\n    const yProperty = this.props.currentFeature + this.props.currentYear;\n\n    rootGroup.append('g')\n      .selectAll('dot')\n      .data(data)\n      .join('circle')\n      .attr('cx', d => x(Number(d[xProperty])))\n      .attr('cy', d => y(Number(d[yProperty])))\n      .attr('r', 3)\n      .style('fill', '#69b3a2')\n\n    rootGroup.append('text')\n      .attr('x', width / 2)\n      .attr('y', height + 30)\n      .attr('text-anchor', 'middle')\n      .text('Homicide rate')\n\n    rootGroup.append('text')\n      .attr('transform', 'rotate(-90)')\n      .attr('x', -height/2)\n      .attr('y', -35)\n      .attr('text-anchor', 'middle')\n      .text(this.featureList[this.props.currentFeature])\n      \n  }\n\n  clearChart() {\n    d3.select(this.canvasRef.current).select('#root').selectAll('*').remove();\n  }\n\n  componentDidMount() {\n    this.props.featureList.forEach(feature => {\n      this.featureList[feature.key] = feature.feature;\n    });\n  }\n\n  render() {\n    if (this.props.stateCSV.length > 0 && this.props.countyCSV.length > 0) {\n\n      if (this.props.currentState === '') {\n        this.clearChart();\n        this.drawScatterPlot(this.props.stateCSV);\n      } else {\n        this.clearChart();\n        this.drawScatterPlot(this.props.countyCSV);\n      }\n    }\n    const title = this.props.currentState === '' ? \n      ('Correlation between ' + this.featureList[this.props.currentFeature] + ' and homicide rate in US states in 19' + this.props.currentYear) :\n      ('Correlation between ' + this.featureList[this.props.currentFeature] + ' and homicide rate in the state ' + this.props.currentState + ' in 19' + this.props.currentYear);\n    return (\n      <div style={{height: '100%'}}>\n        <Row style={{height: '100%'}}>\n          <Col span={20}>\n            <div style={{textAlign: 'center'}}>{title}</div>\n            <div style={{height: '90%'}} ref={this.canvasRef}>\n              <svg style={{height: '100%', width: '100%'}}><g id='root'></g></svg>\n            </div>\n          </Col>\n          <Col span={4}>\n            <div>[Correlation]</div>\n            <div>[Explanation]</div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default ScatterPlot;","import * as d3 from 'd3';\n\nexport function xScale(data, currentYear, left, right) {\n  const HR = 'HR';\n  const property = HR + currentYear;\n\n  return d3.scaleLinear()\n    .domain(d3.extent(data.map(d => Number(d[property]))))\n    .range([left, right]); \n}\n\nexport function yScale(data, currentFeature, currentYear, bottom, top) {\n  const property = currentFeature + currentYear;\n  \n  return d3.scaleLinear()\n    .domain(d3.extent(data.map(d => Number(d[property]))))\n    .range([bottom, top]);\n}","import React from 'react';\nimport * as d3 from 'd3';\n//import { getColorScale, getExtrema, showMap, hideMap } from './helper';\nimport { getAverage } from './helper-heatmap';\n\nclass Heatmap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef(); \n\n        // map data\n        this.yearRange = [];\n        this.stateGeojson = [];\n        this.countyGeojson = [];\n\n        // map id\n        this.STATE_MAP_ID = 'h-state';\n        this.COUNTY_MAP_ID = 'h-county';\n\n        // number of colors for the color scale\n        this.STATE_COLORS = 7;\n        this.COUNTY_COLORS = 7;\n\n        this.featureList = {};\n\n        this.features = this.props.featureList;\n        /*\n        this.marks = this.props.timeline.reduce((marksDict, year) => {\n            marksDict[year] = '19' + year;\n            return marksDict;\n        }, {});*/\n    }\n\n\n\n\n    drawHeatMap(data) {\n       \n        const { scrollWidth, scrollHeight } = this.canvasRef.current;\n        const margins = { top: 30, right: 30, bottom: 100, left: 200 };\n        const width = scrollWidth - margins.left - margins.right;\n        const height = scrollHeight - margins.top - margins.bottom;\n\n        //console.log(this.props.countyCSV);\n        //console.log(this.props.featureList)\n\n        if (this.props.currentState !== '') {\n            // a state is selected\n            // filter counties that are in the state\n            data = data.filter(d => d.STATE_NAME === this.props.currentState);\n        }\n        //console.log(data);\n        var cleanedData = []\n        this.props.featureList.forEach(feature => {\n            this.props.years.forEach(year => {\n                let avg = getAverage(data, feature.key, year);\n                \n                cleanedData.push({ feature: feature.feature, year: '19' + year, value: avg });\n            })\n        });\n\n        const xScale = d3.scaleBand()\n            .range([0, width])\n            .domain(this.props.years.map(year => '19' + year));\n        \n        const yScale = d3.scaleBand()\n            .range([0, height])\n            .domain(this.props.featureList.map(feature => feature.feature))\n            \n\n        //Setting chart width and adjusting for margins\n        const svg = d3.select(this.canvasRef.current).select('svg')\n            .attr('width', scrollWidth)\n            .attr('height', scrollHeight);\n\n        const rootGroup = svg.select('g#root')\n            .attr('transform', `translate(${margins.left}, ${margins.top})`);\n        \n\n        \n        //Append x axis\n        rootGroup.append('g')\n            .call(d3.axisBottom(xScale).ticks(4))\n            .attr('transform', `translate(0, ${height})`) \n\n        //Append y axis\n        const yAxis = rootGroup.append('g')\n            .call(d3.axisLeft(yScale))\n            //.attr('transform', `translate(${width}, 0)`)\n\n        const dataPerFeature = {};\n        cleanedData.forEach(d => {\n            if (dataPerFeature.hasOwnProperty(d.feature)) {\n                dataPerFeature[d.feature].push(d.value);\n            } else {\n                dataPerFeature[d.feature] = [d.value];\n            }\n        })\n        \n        const colorScales = {};\n        for (let key in dataPerFeature) {\n            colorScales[key] = d3.scaleLinear()\n                .range(['#eff3ff', '#08519c'])\n                .domain(d3.extent(dataPerFeature[key]));\n        }\n        /*\n        const colorScale = d3.scaleLinear()\n            .range(['#eff3ff', '#08519c'])\n            .domain(d3.extent(cleanedData.map(d => d.value)));\n        */\n        rootGroup.selectAll()\n            .data(cleanedData)\n            .enter()\n            .append('rect')\n            .attr('x', d => xScale(d.year))\n            .attr('y', d => yScale(d.feature))\n            .attr('width', xScale.bandwidth())\n            .attr('height', yScale.bandwidth())\n            .style('fill', d => colorScales[d.feature](d.value))\n\n        yAxis.selectAll('g').selectAll('text')\n            .attr('font-weight', d => {\n                return d === 'Homicide rate' ? 700 : 400\n            }).attr('font-size', d => {\n                return d === 'Homicide rate' ? '20px' : '10px'\n            })\n        \n        \n            \n    }\n\n    clearMap() {\n        d3.select(this.canvasRef.current).select('#root').selectAll('*').remove();\n    }\n \n    /*\n    drawCounties(svg, colorScale) {\n        // console.log(\" ----> colorScale = \", colorScale)\n        \n        svg.append('g')\n            .attr('id', this.COUNTY_MAP_ID)\n            .append('rect')\n            .data(this.countyGeojson)\n            .enter()\n            .attr('fill', d => colorScale(d.properties[this.state.property]))\n            .style('stroke', '#000')\n    \n    }*/\n\n    componentDidMount() {\n        \n        this.props.featureList.forEach(element => {\n            this.featureList[element.key] = element.feature;\n        });\n       \n          \n    }\n\n    render() {\n        if (this.props.countyCSV.length > 0) {\n            this.clearMap();\n            this.drawHeatMap(this.props.countyCSV);\n        }\n        const text = this.props.currentState === '' ? ('Socio-economic characteristics in the US') :\n            'Socio-economic characteristics in ' + this.props.currentState;\n        return (\n            <div style={{ height: '100%' }} ref={this.canvasRef}>\n                <div style={{textAlign: 'center'}}>{text}</div>\n                <svg style={{ width: '100%', height: '100%' }}>\n                    <g id='root'></g>\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default Heatmap;","\n\nexport function getAverage(data, feature, year) {\n\n    const property = feature + year;\n    let sum = 0;\n    data.forEach(d => sum += Number(d[property]));\n    return sum / data.length;\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Layout, Row, Col, Card } from 'antd';\nimport * as d3 from 'd3';\nimport natCounties from './assets/NAT_counties.csv';\nimport natStates from './assets/NAT_states.csv';\nimport Feature from './feature/Feature';\nimport Time from './time/Time';\nimport Choropleth from './map/Choropleth';\nimport natGeojson from './assets/NAT.geojson';\nimport statesGeojson from './assets/US_states.geojson';\nimport ParallelCoordinates from './parallel-coordinates/ParallelCoordinates';\nimport { createTooltip } from './tooltip';\nimport ScatterPlot from './scatter-plot/ScatterPlot';\nimport Heatmap from './map/Heatmap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      countyDataset: [],\n      stateDataset: [],\n      feature: 'HR',\n      year: 60,\n      state: '',\n      county: ''\n    };\n\n    this.features = [\n      {key: 'HR', feature: 'Homicide rate'},\n      {key: 'UE', feature: 'Unemployment rate'},\n      {key: 'DV', feature: 'Divorce rate'},\n      {key: 'MA', feature: 'Median age'},\n      {key: 'DNL', feature: 'Population density'},\n      {key: 'MFIL', feature: 'Median family income'},\n      {key: 'FP', feature: 'Percentage of families below poverty'},\n      {key: 'BLK', feature: 'Percentage of black population'},\n      {key: 'GI', feature: 'Gini index'},\n      {key: 'FH', feature: 'Percentage of female headed households'}\n    ];\n    this.years = [60, 70, 80, 90];\n\n    this.selectFeature = this.selectFeature.bind(this);\n    //this.selectTime = this.selectTime.bind(this);\n    this.selectRegion = this.selectRegion.bind(this);\n\n    //this.tooltip = createTooltip();\n  }\n\n  selectFeature(e) {\n    e.preventDefault();\n    this.setState({feature: e.currentTarget.accessKey});\n  }\n\n  selectTime = (year) => {\n    this.setState({year: year});\n  };\n\n  selectRegion(state, county) {\n    this.setState({state: state, county: county})\n  }\n\n  componentDidMount() {\n  }\n\n  fetchData() {\n    Promise.all([d3.csv(natCounties), d3.csv(natStates)]).then(data => {\n      this.setState({countyDataset: data[0], stateDataset: data[1]});\n    });\n  }\n\n  componentDidUpdate() {\n    //console.log(this.state)\n  }\n\n  render() {\n    if (this.state.countyDataset.length === 0 || this.state.stateDataset.length === 0) {\n      this.fetchData();\n    }\n    const firstRowHeight = 700;\n    const secondRowHeight = 1080-firstRowHeight-30-12;\n    //console.log(this.state)\n    return (\n      /*<div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>*/\n      \n      <div className=\"App\">\n        <Layout className=\"layout\">\n          <Row gutter={[6, 6]}>\n            <Col span={24}>\n              <Row gutter={6}>\n                <Col span={4} >\n                  <Card style={{height: firstRowHeight}}>\n                    <Feature\n                      featureList={this.features}\n                      currentFeature={this.state.feature}\n                      onSelectFeature={this.selectFeature}\n                    />\n                  </Card>\n                </Col>\n                <Col span={14} >\n                  <Card style={{height: firstRowHeight}}>\n                    <Time\n                      timeline={this.years}\n                      onSelectTime={this.selectTime}\n                    />\n                    <Choropleth\n                      stateGeojson={statesGeojson}\n                      stateDataset={this.state.stateDataset}\n                      countyGeojson={natGeojson}\n                      currentFeature={this.state.feature}\n                      currentYear={this.state.year}\n                      years={this.years}\n                      onSelectRegion={this.selectRegion}\n                      //tooltip={this.tooltip}\n                      featureList={this.features}\n                    />\n                  </Card>\n                </Col>\n                <Col span={6} >\n                  <Card style={{height: firstRowHeight}}>\n                  <Heatmap\n                      featureList={this.features}\n                      years={this.years}\n                      countyCSV={this.state.countyDataset}\n                      currentState={this.state.state}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n            </Col>\n            <Col span={24}>\n              <Row gutter={6}>\n                <Col span={14} >\n                  <Card style={{height: secondRowHeight}}>\n                    <ParallelCoordinates\n                      featureList={this.features}\n                      stateCSV={this.state.stateDataset}\n                      currentYear={this.state.year}\n                      countyCSV={this.state.countyDataset}\n                      currentState={this.state.state}\n                    />\n                  </Card>\n                </Col>\n                <Col span={10} >\n                  <Card style={{height: secondRowHeight}}>\n                    <ScatterPlot\n                      featureList={this.features}\n                      stateCSV={this.state.stateDataset}\n                      countyCSV={this.state.countyDataset}\n                      currentState={this.state.state}\n                      //currentCounty={this.state.county}\n                      currentFeature={this.state.feature}\n                      currentYear={this.state.year}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  /*<React.StrictMode>\n    <App />\n  </React.StrictMode>*/\n  <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}