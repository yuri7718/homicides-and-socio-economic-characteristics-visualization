{"version":3,"sources":["assets/NAT_counties.csv","assets/NAT_states.csv","assets/NAT.geojson","assets/US_states.geojson","feature/Feature.js","time/Time.js","map/helper.js","map/Choropleth.js","parallel-coordinates/ParallelCoordinates.js","parallel-coordinates/helper.js","App.js","tooltip.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Feature","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","features","featureList","react_default","a","createElement","id","style","height","overflow","padding","border","index_es","dataLength","length","scrollableTarget","list","dataSource","renderItem","item","Item","key","accessKey","onClick","onSelectFeature","background","currentFeature","Meta","title","feature","React","Component","Time","marks","timeline","reduce","marksDict","year","slider","step","defaultValue","min","max","onChange","onSelectTime","trackStyle","backgroundColor","getColorScale","featureExtrema","nColors","d3","domain","range","getExtrema","years","dataGeojson","propertyArray","map","forEach","property","d","properties","concat","hideMap","mapID","Choropleth","toggleMapType","value","setState","increaseZoomScale","zoomTransition","decreaseZoomScale","resetSelectedRegion","region","onSelectRegion","state","currentYear","showState","x","y","zoomScale","stateGeojson","countyGeojson","canvasRef","createRef","ZOOM_SCALE_THRESHOLD","STATE_MAP_ID","COUNTY_MAP_ID","STATE_COLORS","COUNTY_COLORS","zoom","svg","zoomLevel","transition","delay","duration","scaleBy","_this2","_this$canvasRef$curre","current","scrollWidth","scrollHeight","projection","scale","translate","path","countyExtrema","stateColorScale","countyColorScale","remove","select","drawStates","drawCounties","drawStateLegend","drawCountyLegend","scaleExtent","on","event","transform","selectAll","attr","k","updateZoomedView","colorScale","legend","d3legend","legendColor","shapeWidth","orient","append","_this3","data","enter","STATE_NAME","tooltip","html","getTooltipText","pageX","pageY","_this4","NAME","_this5","roundedValue","toFixed","_this6","element","Promise","all","then","drawMap","catch","err","console","log","prevProps","prevState","text","row","gutter","col","span","segmented","options","es_button","width","ref","ParallelCoordinates","margin","currentState","filter","rootGroup","yScales","bottom","top","scales","Number","getYScales","xScale","join","yScale","each","ticks","stateCSV","countyCSV","clearChart","drawParallelCoordinates","textAlign","App","selectTime","countyDataset","stateDataset","county","selectFeature","bind","assertThisInitialized","selectRegion","e","preventDefault","currentTarget","natCounties","natStates","fetchData","className","layout","card","src_feature_Feature","src_time_Time","map_Choropleth","statesGeojson","natGeojson","parallel_coordinates_ParallelCoordinates","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_App_0"],"mappings":"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","file":"static/js/main.0be4397d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NAT_counties.c46752c1.csv\";","module.exports = __webpack_public_path__ + \"static/media/NAT_states.e22e9ae7.csv\";","module.exports = __webpack_public_path__ + \"static/media/NAT.6db895be.geojson\";","module.exports = __webpack_public_path__ + \"static/media/US_states.2aa3311d.geojson\";","import { Avatar, Divider, List, Skeleton } from 'antd';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport React from 'react';\nimport './Feature.css';\nimport { reduce, schemeBlues, tickStep } from 'd3';\nimport { isContentEditable } from '@testing-library/user-event/dist/utils';\n\n\nclass Feature extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n  render() {\n    const features = this.props.featureList;\n\n    return (\n      <div>\n        <h3>Features</h3>\n        <div\n          id=\"scrollableDiv\"\n          style={{\n            height: 400,\n            overflow: 'auto',\n            padding: '0 16px',\n            border: '1px solid rgba(140, 140, 140, 0.35)',\n          }}\n        >\n        <InfiniteScroll\n          dataLength={features.length}\n          scrollableTarget=\"scrollableDiv\"\n        >\n          <List\n            dataSource={features}\n            renderItem={(item) => (\n              <List.Item\n                key={item.key}\n                accessKey={item.key}\n                onClick={this.props.onSelectFeature}\n                style={{background: this.props.currentFeature===item.key ? '#7b88b8' : 'white'}}\n              >\n                <List.Item.Meta title={item.feature} />\n                <div>[Statistical Measures]</div>\n              </List.Item>\n            )}\n          />\n        </InfiniteScroll>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default Feature;","import { Slider } from 'antd';\nimport React from 'react';\nimport './Time.css'\n\nclass Time extends React.Component {\n  constructor(props) {\n    super(props)\n    this.marks = this.props.timeline.reduce((marksDict, year) => {\n      marksDict[year] = '19' + year;\n      return marksDict;\n  }, {});\n  }\n  \n  render() {\n    return (\n      <div id=\"timeline\">\n        <Slider marks={this.marks} step={null}\n          defaultValue={60} min={60} max={90}\n          onChange={this.props.onSelectTime}\n          trackStyle={{backgroundColor: '#f5f5f5'}}\n        />\n      </div>\n    )\n  }\n};\n\nexport default Time;","import * as d3 from 'd3';\n\n/**\n * Return the color scale for the selected feature\n * \n * @param {number[]} featureExtrema The extrema for the selected feature over the 4 decades\n * @param {number} nColors The number of colors for the color scale\n * @returns {function} The color scale\n */\nexport function getColorScale(featureExtrema, nColors) {\n  \n  return d3.scaleQuantile()\n    .domain(d3.extent(featureExtrema))\n    .range(d3.schemeGnBu[nColors]);\n}\n\n/**\n * Return a list of extrema for the selected feature over the 4 decades\n * \n * @param {string} feature The selected feature\n * @param {number[]} years The array of years [60, 70, 80, 90]\n * @param {Object[]} dataGeojson The geojson data for all counties\n * @returns {number[]} The extrema for the selected feature\n */\nexport function getExtrema(feature, years, dataGeojson) {\n\n  // propertyArray is ['HR60', 'HR70', 'HR80, 'HR90'] for input feature HR (homicide rate)\n  const propertyArray = years.map(year => feature + year);\n\n  // iterate through the propertyArray to find the extrema\n  let featureExtrema = [];\n  propertyArray.forEach(property => {\n    const features = dataGeojson.map(d => d.properties[property]);\n    featureExtrema = d3.extent(featureExtrema.concat(features));\n  });\n\n  return featureExtrema;\n}\n\n\nexport function showMap(mapID) {\n  d3.selectAll(mapID)\n    .style('visibility', 'visible');\n}\n\nexport function hideMap(mapID) {\n  d3.selectAll(mapID)\n    .style('visibility', 'hidden');\n}\n\nexport function hideStateLegend(stateLegend) {\n  stateLegend.style('visibility', 'hidden');\n}\n\nexport function showStateLegend(stateLegend) {\n  stateLegend.style('visibility', 'visible');\n}\n\nexport function getTooltipText(region, feature, value, year) {\n  const roundedValue = value.toFixed(2);\n  const html =\n  `<div>\n    <p><b>${region}<b></p>\n    <p><b>${feature}: </b>${roundedValue}<p>\n    <p><b>Year: </b>19${year}</p>\n  </div>`\n  return html;\n}","import React from 'react';\nimport * as d3 from 'd3';\nimport { getColorScale, getExtrema, showMap, hideMap, getTooltipText, showStateLegend, hideStateLegend } from './helper';\nimport { Segmented, Row, Col, Button } from 'antd';\nimport d3legend from 'd3-svg-legend';\n\nclass Choropleth extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      property: this.props.currentFeature + this.props.currentYear,\n      showState: true,\n      x: 0,\n      y: 0,\n      zoomScale: 1,\n      map: 'CHOROPLETH',\n      region: ''\n    }\n\n    // geojson data\n    this.stateGeojson = [];\n    this.countyGeojson = [];\n\n    this.canvasRef = React.createRef();\n    this.ZOOM_SCALE_THRESHOLD = 2;\n\n    // map id\n    this.STATE_MAP_ID = 'g-state';\n    this.COUNTY_MAP_ID = 'g-county';\n\n    // number of colors for the color scale\n    this.STATE_COLORS = 7;\n    this.COUNTY_COLORS = 7;\n\n    this.zoom = Object;\n\n    this.featureList = {};\n  }\n\n  toggleMapType = (value) => {\n    //event.preventDefault();\n    //console.log(value)\n    this.setState({map: value});\n  }\n\n  increaseZoomScale = () => {\n    this.zoomTransition(d3.select('#map'), 1.2);  \n  }\n\n  decreaseZoomScale = () => {\n    this.zoomTransition(d3.select('#map'), 0.8);\n  }\n\n  resetSelectedRegion = () => {\n    this.setState({region: ''}, () => {this.props.onSelectRegion('', '');})\n  }\n\n  zoomTransition(svg, zoomLevel) {\n    svg.transition()\n      .delay(100)\n      .duration(700)\n      .call(this.zoom.scaleBy, zoomLevel);\n  }\n\n\n\n  drawMap() {\n    const {scrollWidth, scrollHeight} = this.canvasRef.current;\n\n    const projection = d3.geoAlbersUsa()\n      .scale(scrollWidth / 1.2)\n      .translate([scrollWidth / 2, scrollHeight / 2]);\n    \n    const path = d3.geoPath()\n      .projection(projection);\n\n    const countyExtrema = getExtrema(this.props.currentFeature, this.props.years, this.countyGeojson);\n    const stateExtrema = getExtrema(this.props.currentFeature, this.props.years, this.stateGeojson);\n    \n    const stateColorScale = getColorScale(stateExtrema, this.STATE_COLORS);\n    const countyColorScale = getColorScale(countyExtrema, this.COUNTY_COLORS);\n\n    d3.selectAll('#' + this.STATE_MAP_ID).remove();\n    d3.selectAll('#' + this.COUNTY_MAP_ID).remove();\n    const svg = d3.select(this.canvasRef.current).select('#map');\n\n    this.drawStates(svg, stateColorScale, path);\n    this.drawCounties(svg, countyColorScale, path);\n    this.drawStateLegend(stateColorScale);\n    this.drawCountyLegend(countyColorScale);\n    \n    if (this.state.showState) {\n      hideMap('#' + this.COUNTY_MAP_ID);\n    }\n\n    // zoom function\n    const zoomed = event => {\n      const {transform} = event;\n      d3.select('#map').selectAll('g').attr('transform', transform);\n      d3.select('#map').selectAll('g').attr('stroke-width', 1 / transform.k);\n      this.setState({x: transform.x, y: transform.y, zoomScale: transform.k}, this.updateZoomedView(this.state.zoomScale));\n    };\n\n    this.zoom = d3.zoom()\n      .scaleExtent([1, 4])\n      .on(\"zoom\", zoomed);\n    \n    svg.call(this.zoom)\n      .transition()\n      .call(this.zoom.transform, d3.zoomIdentity.translate(this.state.x,this.state.y).scale(this.state.zoomScale));\n\n  }\n\n  drawStateLegend(colorScale) {\n    const legend = d3legend.legendColor()\n      .shapeWidth(30)\n      .orient('vertical')\n      .scale(colorScale);\n    d3.select('#legend').append('g').attr('id', this.STATE_MAP_ID).call(legend);\n  }\n\n  drawCountyLegend(colorScale) {\n    const legend = d3legend.legendColor()\n      .shapeWidth(30)\n      .orient('vertical')\n      .scale(colorScale);\n    d3.select('#legend').append('g').attr('id', this.COUNTY_MAP_ID).call(legend);\n  }\n\n  drawStates(svg, colorScale, path) {\n    \n    svg.append('g')\n      .attr('id', this.STATE_MAP_ID)\n      .selectAll('path')\n      .data(this.stateGeojson)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', d => colorScale(d.properties[this.state.property]))\n      .style('stroke', '#000')\n      .on('click', (event, d) => {\n        this.props.onSelectRegion(d.properties.STATE_NAME, '');\n        this.setState({region: d.properties.STATE_NAME});\n      })\n      .on('mouseover', (event, d) => {\n        this.props.tooltip\n          .style('visibility', 'visible');\n        this.props.tooltip.html(this.getTooltipText(d.properties.STATE_NAME,\n            this.props.currentFeature, d.properties[this.state.property],\n            this.props.currentYear))\n          .style('left', (event.pageX + 10) + 'px')\n          .style('top', (event.pageY + 10) + 'px');\n      })\n      .on('mouseout', (event, d) => {\n        this.props.tooltip.style('visibility', 'hidden')\n      });\n  }\n\n  drawCounties(svg, colorScale, path) {\n    svg.append('g')\n      .attr('id', this.COUNTY_MAP_ID)\n      .selectAll('path')\n      .data(this.countyGeojson)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', d => colorScale(d.properties[this.state.property]))\n      .style('stroke', '#000')\n      .on('click', (event, d) => {\n        this.props.onSelectRegion(d.properties.STATE_NAME, d.properties.NAME);\n        this.setState({region: d.properties.NAME + ', ' + d.properties.STATE_NAME});\n      })\n      .on('mouseover', (event, d) => {\n        this.props.tooltip\n          .style('visibility', 'visible');\n        this.props.tooltip.html(this.getTooltipText(d.properties.NAME + ', ' + d.properties.STATE_NAME,\n            this.props.currentFeature,\n            d.properties[this.state.property],\n            this.props.currentYear))\n          .style('left', (event.pageX + 10) + 'px')\n          .style('top', (event.pageY + 10) + 'px');\n      })\n      .on('mouseout', (event, d) => {\n        this.props.tooltip.style('visibility', 'hidden')\n      });\n\n   \n  }\n\n  /**\n   * Toogle the visibility of #map-county based on zoom scale\n   * \n   * @param {number} zoomScale The scale factor\n   */\n  updateZoomedView(zoomScale) {\n    if (zoomScale > this.ZOOM_SCALE_THRESHOLD && this.state.showState === true) {\n      // change to county view\n      this.setState({showState: false}, () => {\n        showMap('#' + this.COUNTY_MAP_ID);\n        hideStateLegend(d3.select('#legend').select('#' + this.STATE_MAP_ID));\n      });\n    } else if (zoomScale <= this.ZOOM_SCALE_THRESHOLD && this.state.showState === false) {\n      // change to state view\n      this.setState({showState: true}, () => {\n        hideMap('#' + this.COUNTY_MAP_ID);\n        showStateLegend(d3.select('#legend').select('#' + this.STATE_MAP_ID))\n      });\n    }\n  }\n\n  getTooltipText(region, feature, value, year) {\n    const roundedValue = value.toFixed(2);\n    const html =\n    `<div>\n      <p><b>${region}<b></p>\n      <p><b>${this.featureList[feature]}: </b>${roundedValue}<p>\n      <p><b>Year: </b>19${year}</p>\n    </div>`\n    return html;\n  }\n\n  componentDidMount() {\n    this.props.featureList.forEach(element => {\n      this.featureList[element.key] = element.feature;\n    });\n\n    Promise.all([d3.json(this.props.stateGeojson), d3.json(this.props.countyGeojson)]).then(data => {\n      this.stateGeojson = data[0].features;\n      this.countyGeojson = data[1].features;\n      this.drawMap();\n    }).catch(err => console.log(\"error\", err));\n  \n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const property = this.props.currentFeature + this.props.currentYear;\n    if (prevState.property !== property) {\n      this.setState({property: property});\n      this.drawMap();\n    }\n  }\n\n  render() {\n    const text = (this.state.region==='') ? 'None' : this.state.region;\n    return (\n      <div style={{height: '100%'}}>\n        <Row gutter={[16, 16]} style={{height: '100%'}}>\n          <Col span={4}>\n            <Segmented options={['CHOROPLETH', 'HEXBIN']} value={this.state.map} onChange={this.toggleMapType} />\n            <div>\n              <svg id='legend'><g></g></svg>\n            </div>\n            <div>\n              <Button onClick={this.increaseZoomScale}>+</Button>\n              <Button onClick={this.decreaseZoomScale}>-</Button>\n            </div>\n            <div>\n              Selected region: {text}\n            </div>\n            <Button onClick={this.resetSelectedRegion}>Reset selected region</Button>\n          </Col>\n          <Col span={20}>\n          <div style={{height: '100%', width: '100%'}} ref={this.canvasRef}>\n            <svg id='map' style={{width: '100%', height: '100%'}}><g id='root'></g></svg>\n          </div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Choropleth;","import React from 'react';\nimport * as d3 from 'd3';\nimport { Spin } from 'antd';\nimport { getStateData, getYScales } from './helper';\n\nclass ParallelCoordinates extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n\n    this.title = '';\n  }\n\n\n\n  drawParallelCoordinates(data) {\n\n    const {scrollWidth, scrollHeight} = this.canvasRef.current;\n    const margin = {top: 50, right: 50, bottom: 50, left: 50};\n    const width = scrollWidth - margin.left - margin.right;\n    const height = scrollHeight - margin.top - margin.bottom;\n\n    if (this.props.currentState !== '') {\n      data = data.filter(d => d.STATE_NAME === this.props.currentState);\n    }\n\n    const svg = d3.select(this.canvasRef.current).select('svg')\n      .attr('width', width)\n      .attr('height', height)\n\n    const rootGroup = svg.select('g#root');\n\n    rootGroup.append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n    let features = this.props.featureList.map(feature => feature.key + this.props.currentYear);\n\n    const yScales = getYScales(data, features, margin.top + height, margin.top);\n    const xScale = d3.scalePoint()\n      .range([margin.left, width])\n      .domain(features);\n\n    const path = d => {\n      return d3.line()(features.map(feature => {\n        const yScale = yScales[feature];\n        return [xScale(feature), yScale(d[feature])];\n      }));\n    }\n\n    rootGroup.selectAll('path')\n      .data(data)\n      .join('path')\n      .attr('d', path)\n      .style('fill', 'none')\n      .style('stroke', '#69b3a2')\n    \n    rootGroup.selectAll(\"myAxis\")\n      .data(features).enter()\n      .append(\"g\")\n      .attr('id', 'axis-test')\n      .attr('transform', d => `translate(${xScale(d)})`)\n      .each(function(d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(yScales[d])); })\n      .append(\"text\")\n      .style(\"text-anchor\", \"middle\")\n      .attr(\"y\", 10)\n      .text(function(d) { \n        return d; })\n      .style(\"fill\", \"black\")\n      .attr('id', 'label-test')\n      \n  \n  }\n\n  componentDidMount() {\n\n  }\n\n  componentDidUpdate(prevProps, prevState) { \n    if (prevProps.currentState !== this.props.currentState) {\n      console.log(this.props.currentState)\n    }\n  }\n\n  clearChart() {\n    d3.select(this.canvasRef.current).select('g#root').selectAll('*').remove();\n  }\n\n\n  render() {\n  \n    if (this.props.stateCSV.length > 0 && this.props.countyCSV.length > 0) {\n      if (this.props.currentState === '') {\n        this.clearChart();\n        this.drawParallelCoordinates(this.props.stateCSV);\n      } else {\n        this.clearChart();\n        this.drawParallelCoordinates(this.props.countyCSV);\n      }\n    }\n    const text = this.props.currentState === '' ?\n      ('US states socio-economic characteristics in 19' +  this.props.currentYear) :\n      this.props.currentState + ' socio-economic characteristics in 19' + this.props.currentYear;\n    return (\n      <div style={{height: '100%'}}>\n        <div style={{padding: '10px 10px', textAlign: 'center'}}>{text}</div>\n        <div style={{height: '100%'}} ref={this.canvasRef}>\n          <svg style={{width: '100%', height: '100%'}}>\n            <g id='root'></g>\n          </svg>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default ParallelCoordinates;","import * as d3 from 'd3';\n\n/**\n * \n * @param {*} data \n * @param {*} features \n * @param {*} bottom \n * @param {*} top \n * @returns \n */\nexport function getYScales(data, features, bottom, top) {\n  \n  const scales = {};\n\n  features.forEach(feature => {\n    scales[feature] = d3.scaleLinear()\n      .domain(d3.extent(data, item => Number(item[feature])))\n      .range([bottom, top]);\n  });\n \n\n\n  return scales;\n}\n\nexport function getStateData(data, year) {\n  \n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Layout, Row, Col, Card } from 'antd';\nimport * as d3 from 'd3';\nimport natCounties from './assets/NAT_counties.csv';\nimport natStates from './assets/NAT_states.csv';\nimport Feature from './feature/Feature';\nimport Time from './time/Time';\nimport Choropleth from './map/Choropleth';\nimport natGeojson from './assets/NAT.geojson';\nimport statesGeojson from './assets/US_states.geojson';\nimport ParallelCoordinates from './parallel-coordinates/ParallelCoordinates';\nimport { createTooltip } from './tooltip';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      countyDataset: [],\n      stateDataset: [],\n      feature: 'HR',\n      year: 60,\n      state: '',\n      county: ''\n    };\n\n    this.features = [\n      {key: 'HR', feature: 'Homicide rate'},\n      {key: 'UE', feature: 'Unemployment rate'},\n      {key: 'DV', feature: 'Divorce rate'},\n      {key: 'MA', feature: 'Median age'},\n      {key: 'DNL', feature: 'Population density'},\n      {key: 'MFIL', feature: 'Median family income'},\n      {key: 'FP', feature: 'Percentage of families below poverty'},\n      {key: 'BLK', feature: 'Percentage of black population'},\n      {key: 'GI', feature: 'Gini index'},\n      {key: 'FH', feature: 'Percentage of female headed households'}\n    ];\n    this.years = [60, 70, 80, 90];\n\n    this.selectFeature = this.selectFeature.bind(this);\n    //this.selectTime = this.selectTime.bind(this);\n    this.selectRegion = this.selectRegion.bind(this);\n\n    this.tooltip = createTooltip();\n  }\n\n  selectFeature(e) {\n    e.preventDefault();\n    this.setState({feature: e.currentTarget.accessKey});\n  }\n\n  selectTime = (year) => {\n    this.setState({year: year});\n  };\n\n  selectRegion(state, county) {\n    this.setState({state: state, county: county})\n  }\n\n  componentDidMount() {\n  }\n\n  fetchData() {\n    Promise.all([d3.csv(natCounties), d3.csv(natStates)]).then(data => {\n      this.setState({countyDataset: data[0], stateDataset: data[1]});\n    });\n  }\n\n  componentDidUpdate() {\n    //console.log(this.state)\n  }\n\n  render() {\n    if (this.state.countyDataset.length === 0 || this.state.stateDataset.length === 0) {\n      this.fetchData();\n    }\n    const firstRowHeight = 700;\n    const secondRowHeight = 500;\n    //console.log(this.state)\n    return (\n      /*<div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>*/\n      \n      <div className=\"App\">\n        <Layout className=\"layout\">\n          <Row gutter={[16, 16]}>\n            <Col span={4} >\n              <Card style={{height: firstRowHeight}}>\n                <Feature\n                  featureList={this.features}\n                  currentFeature={this.state.feature}\n                  onSelectFeature={this.selectFeature}\n                />\n              </Card>\n            </Col>\n            <Col span={14} >\n              <Card style={{height: firstRowHeight}}>\n                <Time\n                  timeline={this.years}\n                  onSelectTime={this.selectTime}\n                />\n                <Choropleth\n                  stateGeojson={statesGeojson}\n                  stateDataset={this.state.stateDataset}\n                  countyGeojson={natGeojson}\n                  currentFeature={this.state.feature}\n                  currentYear={this.state.year}\n                  years={this.years}\n                  onSelectRegion={this.selectRegion}\n                  tooltip={this.tooltip}\n                  featureList={this.features}\n                />\n              </Card>\n            </Col>\n            <Col span={6} >\n              <Card style={{height: firstRowHeight}}></Card>\n            </Col>\n            <Col span={16} >\n              <Card style={{height: secondRowHeight}}>\n                <ParallelCoordinates\n                  featureList={this.features}\n                  stateCSV={this.state.stateDataset}\n                  currentYear={this.state.year}\n                  countyCSV={this.state.countyDataset}\n                  currentState={this.state.state}\n                />\n              </Card>\n            </Col>\n            <Col span={8} >\n              <Card style={{height: secondRowHeight}}>adfdf</Card>\n            </Col>\n          </Row>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import * as d3 from 'd3';\nimport './tooltip.css';\n\nexport function createTooltip() {\n  return d3.select('body')\n    .append('div')\n    .attr('class', 'tooltip')\n    .style('visibility', 0);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  /*<React.StrictMode>\n    <App />\n  </React.StrictMode>*/\n  <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}